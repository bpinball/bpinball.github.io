; Copyright Paul Bustin 1983, 2023
; Assembly code for my Robotron ZX Spectrum game
; Reverse engineered from the archived copy of the public release of the game by "Krypton Force"
; (Still don't know how they ended up with a copy of my game)
; Can be assembled by the SDCC Z80 compiler/assembler:
;      sdasz80 -l -o robotron.rel robotron.asm
;      sdcc -mz80 robotron.rel -o robotron --no-std-crt0

	.module robotron
	.z80

BEEPER = 0x03b5					; Spectrum ROM beep routine address
BORDCR = 0x5c48					; Border colour control value (read by BEEPER)
SEED = 0x5c76					; Random number seed
GAME_PARAMS = 0x5b80			; General game params referenced using IX 30 bytes plus also extends -5 bytes backwards
PARAM_SIZE = 0x24				; Max size of game param region (excluding -5 bytes)
ROM_CHARS = 0x3c00				; Start of ROM character set data (note: first 32 chars are non-printing)

; Game character codes
GRUNT = 0
MOMMY = 1
SPHEREOID = 2
ENFORCER = 3
TANK_MISSILE = 4
ELECTRODE = 5
PLAYER_MISSILE_UP_DOWN = 6
PLAYER_MISSILE_LEFT_RIGHT = 7
PLAYER_BASE = 7
PLAYER_U = 8
PLAYER_R = 9
PLAYER_D = 10
PLAYER_L = 11
BRAIN_TL = 12
BRAIN_TR = 13
BRAIN_BL = 14
BRAIN_BR = 15
ENFORCER_MISSILE = 16
QUARK = 17
BLANK = 20
HULK_D_TL = 29
HULK_D_TR = 30
HULK_D_BL = 31
HULK_D_BR = 32

; GAME_PARAMS (IX) offsets
PLAYER_X = 0x00
PLAYER_Y = 0x01
WAVE = 0x02							; Current wave number as BCD
SCORE_0 = 0x03						; First and second score digits as BCD
SCORE_1 = 0x04						; Third and fourth score digits as BCD
SCORE_2 = 0x05						; Fifth and sixth score digits as BCD
LIVES = 0x06
PLAYER_DIR = 0x07
PLAYER_MISSILE_X = 0x08
PLAYER_MISSILE_Y = 0x09
PLAYER_MISSILE_DIR = 0x0A
PLAYER_MOVE_CYCLE = 0x0B
GRUNT_CYCLE_COUNT = 0x0C
MOMMY_CYCLE_COUNT = 0x0D
SPHEREOID_CYCLE_COUNT = 0x0E
ENFORCER_CYCLE_COUNT = 0x0F
BRAIN_CYCLE_COUNT = 0x10
HULK_CYCLE_COUNT = 0x11
TANK_CYCLE_COUNT = 0x12
PROG_CYCLE_COUNT = 0x13
BRAIN_MISSILE_CYCLE_COUNT = 0x14
GAME_STATE_L = 0x15					; Start of game state data low 0x00 (constant)
GAME_STATE_H = 0x16					; Start of game state data high 0x78 (contant)
MOM_SOUND = 0x17
EXTRA_LIFE_SCORE_1 = 0x18
WAVE_DATA_L = 0x19					; Current Wave data pointer low byte
WAVE_DATA_H = 0x1A					; Current Wave data pointer high byte
ENEMY_ALIVE = 0x1B
PROG_COLOUR = 0x1C
ENFORCER_MISSILE_CYCLE_COUNT = 0x1D
TANK_MISSILE_CYCLE_COUNT = 0x1E

; Negative offsets for IX - used as scratch pads or parameters
SCRATCH_1 = 0xFB
OBJECT_COUNTER = 0xFC
SCRATCH_3 = 0xFD
SCRATCH_4 = 0xFE
SCRATCH_5 = 0xFF

; Spectrum display colours
BLACK = 0
BLUE = 1
RED = 2
MAGENTA = 3
GREEN = 4
CYAN = 5
YELLOW = 6
WHITE = 7

BG_BLACK = 0
BG_BLUE = 0x08
BG_RED = 0x10
BG_MAGENTA = 0x18
BG_GREEN = 0x20
BG_CYAN = 0x28
BG_YELLOW = 0x30
BG_WHITE = 0x38

BRIGHT = 0x40
FLASH = 0x80

	.area _CODEABS (ABS)
	.ORG 0x6700
ENTRY:
	JP START

; Convert coordinates to screen cell/attribute address
; B - Y coord (top to bottom)
; C - X coord (left to right)
; On exit:
; DE - address of screen attribute byte at X/Y
; BC - address of start pixel data for cell at X/Y
CONVERT_COORD:
	LD A,B
	RRCA
	RRCA
	RRCA
	AND #0xE0
	OR C
	LD C,A
	LD E,A
	LD A,B
	SRL A
	SRL A
	SRL A
	OR #0x58
	LD D,A
	LD A,B
	OR #0x40
	AND #0x58
	LD B,A
	RET

; Checks that the coordinates in BC are valid for the screen width/height
; B - signed Y coord (down from top left of screen)
; C - signed X coord (right from top left of screen)
; Carry Flag - If set Y coord must be in gameplay area (first 22 lines)
; X must be between 0 and 31
; Y must be between 0 and 23/21
; On exit:
; Carry flag is set if coord is invalid.
CHECK_COORD:
	JR NC, SKIP_CHECK_21
	LD A,#0x15
	CP B
	RET C
SKIP_CHECK_21:
	LD A,#0x17
	CP B
	RET C
	LD A,B
	CP #0x00
	RET C
	LD A,C
	CP #0x00
	RET C
	LD A,#0x1F
	CP C
	RET C
	OR A
	RET

; Draws character onto display character block
; HL - start of source character area
; B - Y coord (top to bottom)
; C - X coord (left to right)
; Carry flag set means limit to playfield
; A - Character code to draw
; D - attribute code to use
DRAW_CHAR:
	PUSH DE
	LD DE,#0x0000
	LD E,A
	SLA E
	RL D
	SLA E
	RL D
	SLA E
	RL D
	ADD HL,DE				; HL now contains HL + A * 8
	POP DE
	LD A,D
	OR A
	CALL DRAW_CHAR_2
	RET

; Lower level draw character routine
; HL - start of character data address
; B - Y coord (top to bottom)
; C - X coord (left to right)
; A - attribute code for character
; Carry flag set means limit to playfield
; On exit:
; Carry flag is set if coords to draw were invalid.
DRAW_CHAR_2:
	PUSH AF
	CALL CHECK_COORD
	JR NC, COORD_OK
	POP AF
	SCF
	RET
COORD_OK:
	CALL CONVERT_COORD
	POP AF
	LD (DE),A
	LD D,B
	LD B,#0x08
DRAW_LOOP:
	LD A,(HL)
	LD (DE),A
	INC D
	INC HL
	DJNZ DRAW_LOOP			; Loop to copy character data into display RAM
	OR A
	RET

; Draws from game character set onto display character block
; B - Y coord (top to bottom)
; C - X coord (left to right)
; D - attribute code to use
; A - character code
; Carry flag set means limit to playfield
DRAW_GAME_CHAR:
	PUSH HL
	PUSH BC
	LD HL,#GAME_CHARS
	CALL DRAW_CHAR
	POP BC
	POP HL
	RET

; Draws from rom (ascii) character set onto display character block
; B - Y coord (top to bottom)
; C - X coord (left to right)
; D - attribute code to use
; A - character code
; Carry flag set means limit to playfield
DRAW_ROM_CHAR:
	PUSH HL
	PUSH BC
	LD HL,#ROM_CHARS
	CALL DRAW_CHAR
	POP BC
	POP HL
	RET

; Read keyboard and check valid movement for player direction and process fire button
; On exit:
; D - Player direction L=4, R=2, D=3, U=1 only if not at edge
READ_KEYS:
	LD D,#0x00
	LD A,PLAYER_X(IX)
	CP #0x00
	JR Z, NOT_Z
	LD BC,#0xFEFE
	IN A,(C)
	AND #0x02
	JR NZ, NOT_Z
	LD D,#0x04
NOT_Z:
	LD A,PLAYER_X(IX)
	CP #0x1F
	JR Z, NOT_X
	LD BC,#0xFEFE
	IN A,(C)
	AND #0x04
	JR NZ, NOT_X
	LD D,#0x02
NOT_X:
	LD A,PLAYER_Y(IX)
	CP #0x15
	JR Z, NOT_SYM
	LD BC,#0x7FFE
	IN A,(C)
	AND #0x02
	JR NZ, NOT_SYM
	LD D,#0x03
NOT_SYM:
	LD A,PLAYER_Y(IX)
	CP #0x00
	JR Z, NOT_L
	LD BC,#0xBFFE
	IN A,(C)
	AND #0x02
	JR NZ, NOT_L
	LD D,#0x01
NOT_L:
	LD A,PLAYER_MISSILE_X(IX)
	CP #0xFF
	RET NZ
	LD BC,#0xFEFE
	IN A,(C)
	OR #0xE6
	CP #0xFF
	JR NZ, FIRE
	LD BC,#0xDFFE
	IN A,(C)
	OR #0xE0
	CP #0xFF
	RET Z
FIRE:
	LD A,#0xFE
	PUSH DE
	LD PLAYER_MISSILE_X(IX),A
	LD DE,#0x000A
	LD HL,#0x0032
	CALL BEEP
	POP DE
	RET

; Wrapper to ROM BEEPER that protects registers
BEEP:
	PUSH IX
	PUSH DE
	PUSH HL
	PUSH BC
	CALL BEEPER
	DI
	POP BC
	POP HL
	POP DE
	POP IX
	RET

; Update player status and movement
; On entry:
; D - player direction from keyboard input: 1,2,3, or 4 with 0 = no movement 
UPDATE_PLAYER:
	LD A,PLAYER_MOVE_CYCLE(IX)
	CP #0x00
	JR Z, DO_MOVE
	LD PLAYER_MOVE_CYCLE(IX),#0x00		; Only move player every other game cycle
	JR NO_MOVE_LEFT
DO_MOVE:
	LD PLAYER_MOVE_CYCLE(IX),#0x01
	LD A,PLAYER_DIR(IX)
	CP D
	JR NZ, NO_MOVE_LEFT					; Player was facing wrong way - do not move when changing direction
	PUSH DE
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	POP DE
	LD A,D
	CP #0x01
	JR NZ, NO_MOVE_UP
	DEC PLAYER_Y(IX)
NO_MOVE_UP:
	CP #0x02
	JR NZ, NO_MOVE_RIGHT
	INC PLAYER_X(IX)
NO_MOVE_RIGHT:
	CP #0x03
	JR NZ, NO_MOVE_DOWN
	INC PLAYER_Y(IX)
NO_MOVE_DOWN:
	CP #0x04
	JR NZ, NO_MOVE_LEFT
	DEC PLAYER_X(IX)
NO_MOVE_LEFT:
	LD A,D
	CP #0x00
	JR Z, NO_MOVE
	LD PLAYER_DIR(IX),A
NO_MOVE:
	CALL CHECK_PLAYER_KILLED
	RET C
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	LD A,#PLAYER_BASE
	ADD PLAYER_DIR(IX)
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	OR A
	RET

; Check if player has collided with an enemy
; On exit:
; Carry set - if killed
CHECK_PLAYER_KILLED:
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	CALL GET_OBJECT
	CP #6
	JR C, OBJ_LESS_THAN_6
	CP #12
	JR C, PLAYER_OK
OBJ_LESS_THAN_6:
	LD B,A
	CP #20
	JR NZ, OBJ_NOT_20
	LD A,#7
	CP D
	JR Z, PLAYER_OK
OBJ_NOT_20:
	LD A,#3
	CP D
	JR NZ, RET_PLAYER_KILLED
	LD A,B
	CP #1
	JR Z, PLAYER_OK
RET_PLAYER_KILLED:
	SCF
	RET
PLAYER_OK:
	OR A
	RET

; Retrieves game object data at the specified coordinate.
; Input:
; B - Y coord (down from top left of screen)
; C - X coord (right from top left of screen)
; On exit:
; D - Character attribute at coord.
; A - Game char code of object at coord or 0xFF if no match
; Carry flag - set if coord is not valid for playfield.
GET_OBJECT:
	CALL CHECK_COORD
	RET C
	CALL CONVERT_COORD
	LD SCRATCH_4(IX),#0x00
	LD A,(DE)
	LD SCRATCH_5(IX),A
	LD HL,#GAME_CHARS
	LD DE,#0x0008
CHAR_LOOP:
	LD A,(BC)
	CP (HL)
	JR Z, ROW_MATCH
TRY_NEXT_CHAR:
	OR A
	ADC HL,DE
	INC SCRATCH_4(IX)
	LD SCRATCH_3(IX),A
	LD A,#0x35
	CP SCRATCH_4(IX)
	LD A,SCRATCH_3(IX)
	JR NZ, CHAR_LOOP
	LD D,SCRATCH_5(IX)
	LD A,#0xFF
	OR A
	RET
ROW_MATCH:
	PUSH HL
	PUSH BC
	PUSH DE
	PUSH AF
	DEC E
ROW_LOOP:
	INC B
	LD A,(BC)
	INC HL
	CP (HL)
	JR NZ, NO_ROW_MATCH
	DEC E
	JR NZ, ROW_LOOP
	POP AF
	POP DE
	POP BC
	POP HL
	LD A,SCRATCH_4(IX)
	LD D,SCRATCH_5(IX)
	OR A
	RET
NO_ROW_MATCH:
	POP AF
	POP DE
	POP BC
	POP HL
	JR TRY_NEXT_CHAR

PLAYER_KILLED:
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	LD A,PLAYER_DIR(IX)
	ADD #PLAYER_BASE
	LD D,#BRIGHT + WHITE
	CALL DRAW_GAME_CHAR
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	CALL CONVERT_COORD
	PUSH BC
	PUSH BC
	POP HL
	POP DE
	LD C,#0x20
KILL_LOOP_2:
	LD B,#0x08
KILL_LOOP_1:
	PUSH DE
	PUSH HL
	LD DE,#0x0010
	LD H,#0x01
	LD L,B
	CALL BEEP
	POP HL
	POP DE
	LD A,(HL)
	INC H
	CPL
	XOR (HL)
	DEC H
	LD (HL),A
	INC H
	DJNZ KILL_LOOP_1
	PUSH DE
	POP HL
	DEC C
	JR NZ, KILL_LOOP_2
	PUSH DE
	POP HL
	LD C,#0x05
KILL_LOOP_4:
	LD B,#0x07
KILL_LOOP_3:
	PUSH DE
	PUSH HL
	LD DE,#0x0010
	LD H,#0x01
	LD L,B
	CALL BEEP
	POP HL
	POP DE
	LD A,(HL)
	INC H
	RL (HL)
	AND (HL)
	DEC H
	LD (HL),A
	INC H
	DJNZ KILL_LOOP_3
	PUSH DE
	POP HL
	DEC C
	JR NZ, KILL_LOOP_4
	LD A,LIVES(IX)
	OR A
	JP Z,GAME_OVER
	DEC LIVES(IX)
	LD A,#0xFF
	CALL WAVE_INIT
	JP GAME_LOOP

UPDATE_PLAYER_MISSILE:
	LD B,PLAYER_MISSILE_Y(IX)
	LD C,PLAYER_MISSILE_X(IX)
	LD A,C
	CP #0xFF
	RET Z
	CP #0xFE
	JR NZ, NO_INIT_PLAYER_MISSILE
	LD B,PLAYER_Y(IX)
	LD C,PLAYER_X(IX)
	LD A,PLAYER_DIR(IX)
	LD PLAYER_MISSILE_DIR(IX),A
	JR PM_CONTINUE
NO_INIT_PLAYER_MISSILE:
	PUSH BC
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	POP BC
	LD A,PLAYER_MISSILE_DIR(IX)
PM_CONTINUE:
	CP #0x01
	JR NZ, NOT_PM_UP
	DEC B
NOT_PM_UP:
	CP #0x02
	JR NZ, NOT_PM_RIGHT
	INC C
NOT_PM_RIGHT:
	CP #0x03
	JR NZ, NOT_PM_DOWN
	INC B
NOT_PM_DOWN:
	CP #0x04
	JR NZ, NOT_PM_LEFT
	DEC C
NOT_PM_LEFT:
	CALL CHECK_COORD
	JR NC, PM_GOOD_COORD
	LD PLAYER_MISSILE_X(IX),#0xFF
	RET
PM_GOOD_COORD:
	PUSH BC
	CALL GET_OBJECT
	CP #0x05
	POP BC
	JR NZ, DRAW_PLAYER_MISSILE
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD A,#0x01
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
	RET
DRAW_PLAYER_MISSILE:
	LD PLAYER_MISSILE_X(IX),C
	LD PLAYER_MISSILE_Y(IX),B
	LD A,#PLAYER_MISSILE_UP_DOWN
	BIT 0,PLAYER_MISSILE_DIR(IX)
	JR NZ, PM_IS_UP_DOWN
	LD A,#PLAYER_MISSILE_LEFT_RIGHT
PM_IS_UP_DOWN:
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	RET

DRAW_SCORE:
	LD D,#0x03
SCORE_DIGIT_LOOP:
	PUSH DE
	PUSH HL
	PUSH BC
	LD A,(HL)
	AND #0x0F
	ADD #0x30
	LD D,SCRATCH_5(IX)
	CALL DRAW_ROM_CHAR
	POP BC
	DEC C
	PUSH BC
	LD A,(HL)
	RRCA
	RRCA
	RRCA
	RRCA
	AND #0x0F
	ADD #0x30
	LD D,SCRATCH_5(IX)
	CALL DRAW_ROM_CHAR
	POP BC
	POP HL
	POP DE
	DEC C
	INC HL
	DEC D
	JR NZ, SCORE_DIGIT_LOOP
	RET

; Add to score routine
; A - BCD value to add to score
ADD_SCORE:
	ADD SCORE_0(IX)
	DAA
	LD SCORE_0(IX),A
	LD A,#0x00
	ADC SCORE_1(IX)
	DAA
	LD SCORE_1(IX),A
	LD A,#0x00
	ADC SCORE_2(IX)
	DAA
	LD SCORE_2(IX),A
	PUSH BC
	PUSH DE
	PUSH HL
	LD B,#0x17
	LD C,#0x05
	LD HL,#0x5B83
	LD SCRATCH_5(IX),#0x0F
	CALL DRAW_SCORE
	LD A,SCORE_1(IX)
	SUB EXTRA_LIFE_SCORE_1(IX)
	DAA
	JR C, NO_EXTRA_LIFE
	LD A,EXTRA_LIFE_SCORE_1(IX)
	ADD #0x10
	DAA
	LD EXTRA_LIFE_SCORE_1(IX),A
	LD A,LIVES(IX)
	CP #0x06
	JR Z, NO_EXTRA_LIFE
	LD B,#0x16
	LD C,LIVES(IX)
	LD A,#PLAYER_D
	LD D,#BG_BLUE + WHITE
	OR A
	CALL DRAW_GAME_CHAR
	INC LIVES(IX)
	LD A,#0xF0
	LD (#BORDCR),A
	LD HL,#0x00C8
	LD DE,#0x012C
	CALL BEEP
	LD A,#0x40
	LD (#BORDCR),A
	LD HL,#0x1388
	LD DE,#0x0001
	CALL BEEP
	LD A,#0x0F
	LD (#BORDCR),A
	LD HL,#0x0064
	LD DE,#0x0258
	CALL BEEP
NO_EXTRA_LIFE:
	POP HL
	POP DE
	POP BC
	RET

CHIRP:
	PUSH HL
	PUSH DE
	LD D,#0x00
	LD E,#0x01
	LD A,B
	AND C
	LD H,A
	CALL BEEP
	POP DE
	POP HL
	RET

DRAW_WAVE_ANIMATION:
	LD DE,#0x0106
ANIM_LOOP:
	LD B,#0x0B
	LD A,#0x10
	SUB E
	LD C,A
	LD L,E
	SLA L
ANIM_LOOP_1:
	PUSH HL
	PUSH BC
	PUSH DE
	LD A,B
	SUB D
	LD B,A
	LD A,#BLANK
	LD D,SCRATCH_5(IX)
	CALL DRAW_GAME_CHAR
	POP DE
	POP BC
	PUSH BC
	PUSH DE
	LD A,B
	DEC A
	ADD D
	LD B,A
	LD A,#BLANK
	LD D,SCRATCH_5(IX)
	CALL DRAW_GAME_CHAR
	POP DE
	POP BC
	POP HL
	CALL CHIRP
	INC C
	DEC L
	JR NZ, ANIM_LOOP_1
	LD C,#0x10
	LD A,#0x0B
	SUB D
	LD B,A
	LD L,D
	SLA L
ANIM_LOOP_2:
	PUSH HL
	PUSH BC
	PUSH DE
	LD A,C
	DEC A
	ADD E
	LD C,A
	LD A,#BLANK
	LD D,SCRATCH_5(IX)
	CALL DRAW_GAME_CHAR
	POP DE
	POP BC
	PUSH BC
	PUSH DE
	LD A,C
	SUB E
	LD C,A
	LD A,#BLANK
	LD D,SCRATCH_5(IX)
	CALL DRAW_GAME_CHAR
	POP DE
	POP BC
	POP HL
	CALL CHIRP
	INC B
	DEC L
	JR NZ, ANIM_LOOP_2
	INC E
	INC D
	LD A,E
	CP #0x11
	RET Z
	LD A,SCRATCH_5(IX)
	CP #0x07
	JR Z, ANIM_LOOP
	CP #0xAA
	JR Z, NEXT_ANIM_COLOUR
	LD SCRATCH_5(IX),#0xAA
	JR ANIM_LOOP
NEXT_ANIM_COLOUR:
	LD SCRATCH_5(IX),#0x95
	JR ANIM_LOOP

; Pseudo-random number generator.
; On exit:
; A - a random(ish) value between 0x00 - 0x3f
RANDOM:
	PUSH BC
	PUSH DE
	PUSH HL
	LD HL,(#SEED)
	LD D,H
	LD E,L
	ADD HL,HL
	ADD HL,HL
	ADD HL,HL
	ADD HL,HL
	PUSH HL
	ADD HL,HL
	EX (SP),HL
	OR A
	SBC HL,DE
	POP BC
	ADD HL,BC
	ADD HL,HL
	ADD HL,HL
	ADD HL,HL
	ADD HL,DE
	ADD HL,HL
	ADD HL,HL
	ADD HL,DE
	LD DE,#0x0029
	ADD HL,DE
	LD (#SEED),HL
	LD A,H
	AND #0x3F
	POP HL
	POP DE
	POP BC
	RET

; Check if position in game area is a blank character
; B - Y coord (top to bottom)
; C - X coord (left to right)
; On exit:
; Z flag set if position is blank
CHECK_BLANK_CHAR:
	PUSH BC
	CALL GET_OBJECT
	POP BC
	CP #20
	RET

; Find a random blank region in the game area.
; A - 0 check for a single blank character
; A - Non-zero check for a 2x2 blank region
; On exit:
; C - X coord of blank character or 2x2 region
; B - Y coord
FIND_BLANK:
	PUSH DE
	PUSH HL
	OR A
	JR NZ, CHECK_2X2
GREATER_THAN_21:
	CALL RANDOM
	CP #0x16
	JR NC, GREATER_THAN_21
	LD B,A
GREATER_THAN_31:
	CALL RANDOM
	CP #0x20
	JR NC, GREATER_THAN_31
	LD C,A
	CALL CHECK_BLANK_CHAR
	JR NZ, GREATER_THAN_21				; jump if Non-blank at target coord
	POP HL
	POP DE
	RET
CHECK_2X2:
	CALL RANDOM
	CP #0x15
	JR NC, CHECK_2X2					; Jump of Y coord >= 21
	LD B,A
GREATER_THAN_20:
	CALL RANDOM
	CP #0x1F
	JR NC, GREATER_THAN_20
	LD C,A
	CALL CHECK_BLANK_CHAR
	JR NZ, CHECK_2X2
	INC B
	CALL CHECK_BLANK_CHAR
	JR NZ, CHECK_2X2
	INC C
	CALL CHECK_BLANK_CHAR
	JR NZ, CHECK_2X2
	DEC B
	CALL CHECK_BLANK_CHAR
	JR NZ, CHECK_2X2
	DEC C
	POP HL
	POP DE
	RET

BLANK_2x2:
	PUSH AF
	PUSH DE
	PUSH HL
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD A,#BLANK
	LD D,#WHITE
	INC C
	CALL DRAW_GAME_CHAR
	LD A,#BLANK
	LD D,#WHITE
	INC B
	CALL DRAW_GAME_CHAR
	LD A,#BLANK
	LD D,#WHITE
	DEC C
	CALL DRAW_GAME_CHAR
	DEC B
	POP HL
	POP DE
	POP AF
	RET

; Initialise wave data
WAVE_INIT:
	PUSH AF
	LD SCRATCH_5(IX),#0xAA
	CALL DRAW_WAVE_ANIMATION
	LD SCRATCH_5(IX),#0x07
	CALL DRAW_WAVE_ANIMATION
	LD PLAYER_X(IX),#0x10
	LD PLAYER_Y(IX),#0x0B
	LD PLAYER_DIR(IX),#0x03
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD PROG_COLOUR(IX),#0x07
	LD MOM_SOUND(IX),#0x00
	LD HL,#0x5B8B
	LD DE,#0x5B8C
	LD BC,#0x0009
	LD PLAYER_MOVE_CYCLE(IX),#0x1E
	LDIR
	LD BC,#0x0B10
	LD A,#PLAYER_D
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	POP AF
	OR A
	JR Z, NO_LOST_LIFE
	LD B,#0x16
	LD C,LIVES(IX)
	LD A,#BLANK
	LD D,#BG_BLUE + WHITE
	CALL DRAW_GAME_CHAR
	JR WAVE_INIT_CONTINUE
NO_LOST_LIFE:
	LD A,WAVE(IX)
	CP #0x25
	JR Z, WAVE_25
	ADD #0x01
	DAA
	LD WAVE(IX),A
	AND #0x0F
	ADD #0x30
	LD D,#0x0F
	LD BC,#0x171E
	CALL DRAW_ROM_CHAR
	LD A,WAVE(IX)
	RRCA
	RRCA
	RRCA
	RRCA
	AND #0x0F
	ADD #0x30
	LD D,#0x0F
	LD BC,#0x171D
	CALL DRAW_ROM_CHAR
	LD H,WAVE_DATA_H(IX)
	LD L,WAVE_DATA_L(IX)
	LD BC,#0x0006
	ADD HL,BC
	LD WAVE_DATA_H(IX),H
	LD WAVE_DATA_L(IX),L
WAVE_25:
	LD H,WAVE_DATA_H(IX)
	LD L,WAVE_DATA_L(IX)
	CALL INIT_WAVE_DATA
WAVE_INIT_CONTINUE:
	LD L,#0x10
ELECTRODE_LOOP:
	LD A,#0x00
	CALL FIND_BLANK
	LD A,#ELECTRODE
	LD D,#BRIGHT + GREEN
	CALL DRAW_GAME_CHAR
	DEC L
	JR NZ, ELECTRODE_LOOP
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	CALL INIT_GRUNTS
	CALL INIT_MOMMYS
	CALL INIT_SPHEREOID
	CALL WRITE_FF
	CALL INIT_BRAINS
	CALL INIT_HULKS
	CALL INIT_QUARKS
	CALL WRITE_FF_2
	RET

INIT_WAVE_DATA:
	LD A,(HL)
	INC HL
	PUSH HL
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD E,#0x00
INIT_CHAR_LOOP:
	CP E
	JR Z, INIT_TO_EMPTY_2
	LD (HL),#0x00
	INC HL
	INC HL
	INC E
	JR INIT_CHAR_LOOP
INIT_TO_EMPTY_2:
	CP #0x28
	JR Z, INIT_LOOP_END
	LD (HL),#0xFF
	INC HL
	INC HL
	INC A
	JR INIT_TO_EMPTY_2
INIT_LOOP_END:
	PUSH HL
	POP DE
	POP HL
	LD B,#0x14
	CALL INIT_OBJECT_DATA
	LD B,#0x05
	CALL INIT_OBJECT_DATA
	PUSH HL
	PUSH DE
	POP HL
	LD A,#0x00
INIT_LOOP_3:
	LD (HL),#0xFF
	INC HL
	INC HL
	INC HL
	INC A
	CP #0x14
	JR NZ, INIT_LOOP_3
	PUSH HL
	POP DE
	POP HL
	LD B,#0x14
	CALL INIT_OBJECT_DATA
	LD B,#0x0F
	CALL INIT_OBJECT_DATA
	LD B,#0x14
	CALL INIT_OBJECT_DATA
	PUSH DE
	POP HL
	LD B,#0xB9
INIT_LOOP_4:
	LD (HL),#0xFF
	INC HL
	DJNZ INIT_LOOP_4
	RET

START:
	CALL INIT
GAME_LOOP:
	CALL READ_KEYS
	CALL UPDATE_PLAYER
	JP C,PLAYER_KILLED
	CALL UPDATE_PLAYER_MISSILE
	CALL UPDATE_MOM_SOUND
	LD ENEMY_ALIVE(IX),#0x00
	CALL UPDATE_GRUNTS
	CALL UPDATE_MOMMYS
	CALL UPDATE_SPHEREOIDS
	CALL UPDATE_ENFORCERS
	CALL UPDATE_BRAINS
	CALL UPDATE_HULKS
	CALL UPDATE_TANKS
	CALL UPDATE_MISSILES
	CALL CHECK_PLAYER_KILLED
	JP C,PLAYER_KILLED
	LD A,ENEMY_ALIVE(IX)
	OR A
	JR Z, WAVE_COMPLETE
	JR GAME_LOOP
WAVE_COMPLETE:
	LD A,#0x00
	CALL WAVE_INIT
	JR GAME_LOOP

INIT_OBJECT_DATA:
	LD A,(HL)
	INC HL
	PUSH HL
	PUSH DE
	POP HL
	LD E,#0x00
NEXT_ITEM:
	CP E
	JR Z, INIT_TO_EMPTY
	LD (HL),#0x00
	INC HL
	INC HL
	INC HL
	INC E
	JR NEXT_ITEM
INIT_TO_EMPTY:
	CP B
	JR Z, OBJ_INIT_END
	LD (HL),#0xFF
	INC HL
	INC HL
	INC HL
	INC A
	JR INIT_TO_EMPTY
OBJ_INIT_END:
	PUSH HL
	POP DE
	POP HL
	RET

INIT_GRUNTS:
	LD E,#40
NEXT_GRUNT:
	LD A,(HL)
	CP #0xFF
	JR Z, SKIP_GRUNT
	LD C,A
	LD A,#0x00
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD A,#GRUNT
	LD D,#RED
	PUSH DE
	CALL DRAW_GAME_CHAR
	POP DE
SKIP_GRUNT:
	INC HL
	INC HL
	DEC E
	JR NZ, NEXT_GRUNT
	RET

UPDATE_GRUNTS:
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD A,GRUNT_CYCLE_COUNT(IX)
	DEC A
	LD GRUNT_CYCLE_COUNT(IX),A
	LD OBJECT_COUNTER(IX),#0x28
NEXT_UPDATE_GRUNT:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	CALL Z,DELAY
	JR Z, SKIP_GRUNT_UPDATE
	LD ENEMY_ALIVE(IX),#0xFF
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, MISS_GRUNT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, MISS_GRUNT
GRUNT_HIT_MISSILE:
	LD A,#0x05
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
GRUNT_HIT_ELECTRODE:
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JR SKIP_GRUNT_UPDATE
MISS_GRUNT:
	LD A,GRUNT_CYCLE_COUNT(IX)
	OR A
	JR NZ, SKIP_GRUNT_UPDATE_2
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD A,PLAYER_X(IX)
	CP C
	JR Z, GRUNT_HIT_PLAYER_X
	JR C, PLAYER_LEFT_OF_GRUNT
	INC C
	INC C
PLAYER_LEFT_OF_GRUNT:
	DEC C
GRUNT_HIT_PLAYER_X:
	LD A,PLAYER_Y(IX)
	CP B
	JR Z, GRUNT_HIT_PLAYER_Y
	JR C, PLAYER_ABOVE_GRUNT
	INC B
	INC B
PLAYER_ABOVE_GRUNT:
	DEC B
GRUNT_HIT_PLAYER_Y:
	PUSH BC
	PUSH HL
	CALL GET_OBJECT
	POP HL
	POP BC
	CP #0x06
	JR Z, GRUNT_HIT_MISSILE
	CP #0x07
	JR Z, GRUNT_HIT_MISSILE
	CP #0x00
	JR NZ, GRUNT_NOT_BLOCKED
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	JR SKIP_GRUNT_UPDATE_2
GRUNT_NOT_BLOCKED:
	CP #0x05
	JR Z, GRUNT_HIT_ELECTRODE
SKIP_GRUNT_UPDATE_2:
	LD A,#GRUNT
	LD D,#RED
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
SKIP_GRUNT_UPDATE:
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,NEXT_UPDATE_GRUNT
	LD A,GRUNT_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD GRUNT_CYCLE_COUNT(IX),#0x07
	RET

INIT_MOMMYS:
	LD E,#20
NEXT_INIT_MOMMY:
	LD A,(HL)
	CP #0xFF
	JR Z, SKIP_INIT_MOMMY
	LD A,#0x00
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x06
	LD (HL),A
	DEC HL
	DEC HL
	LD A,#MOMMY
	LD D,#MAGENTA
	PUSH DE
	CALL DRAW_GAME_CHAR
	POP DE
SKIP_INIT_MOMMY:
	INC HL
	INC HL
	INC HL
	DEC E
	JR NZ, NEXT_INIT_MOMMY
	RET

; Check that move is valid for the direction
; SCRATCH_4 - 00 single char check, 01 (non-zero) 2x2 area check
; C - current X coord
; B - current Y coord
; A - direction to move
; On exit:
; Carry flag set:
;    Invalid coordinate and returns to caller above.
;    BC - contains original coords.
;    A - next direction to try
; Carry flag reset:
;    BC - Valid new coordinate
CHECK_MOVE:
	PUSH BC
	CP #0x04
	JR NC, NOT_RIGHT
	CP #0x01
	JR C, NOT_RIGHT
	INC C
	CALL CHECK_COORD2
NOT_RIGHT:
	CP #0x05
	JR C, NOT_LEFT
	CP #0x08
	JR NC, NOT_LEFT
	DEC C
	CALL CHECK_COORD2
NOT_LEFT:
	CP #0x03
	JR C, NOT_DOWN
	CP #0x06
	JR NC, NOT_DOWN
	INC B
	CALL CHECK_COORD2
NOT_DOWN:
	CP #0x07
	JR Z, MOVE_UP
	CP #0x02
	JR NC, NOT_UP
MOVE_UP:
	DEC B
	CALL CHECK_COORD2
NOT_UP:
	INC SP
	INC SP
	RET

; Check coords are in game area for single char or 2x2 character
; C - X coord to test
; B - Y coord to test
; SCRATCH_4 - 00 single char check, 01 2x2 area check
; On exit:
; Carry flag set:
;    Invalid coordinate and returns to caller above.
;    BC - contains original coords.
;    A - next direction to try
; Carry flag reset:
;    BC - Valid new coordinate
CHECK_COORD2:
	LD SCRATCH_5(IX),A
	SCF
	CALL CHECK_COORD
	JR C, INVALID_COORD
	LD A,SCRATCH_4(IX)
	OR A
	JR NZ, CHECK_2X2_COORD
	LD A,SCRATCH_5(IX)
	RET
CHECK_2X2_COORD:
	INC B
	INC C
	SCF
	CALL CHECK_COORD
	JR C, INVALID_COORD
	LD A,SCRATCH_5(IX)
	DEC B
	DEC C
	RET
INVALID_COORD:
	INC SP						; Yuk! Pop return address off stack so we return to prior call
	INC SP
	POP BC
	LD A,SCRATCH_5(IX)
	ADD #0x04
	AND #0x07
	SCF
	RET

UPDATE_MOMMYS:
	DEC MOMMY_CYCLE_COUNT(IX)
	DEC PROG_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#0x14
NEXT_UPDATE_MOMMY:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
REDO_MOMMY:
	LD A,C
	CP #0xFF
	JP Z,SKIP_MOMMY_UPDATE
	BIT 7,A
	JP NZ,UPDATE_PROG
	PUSH BC
	PUSH HL
	CALL GET_OBJECT
	POP HL
	POP BC
	CP #21
	JR C, TRY_NEXT_OBJ
	CP #37
	JR NC, TRY_NEXT_OBJ
REMOVE_MOMMY:
	LD (HL),#0xFF
	JR SKIP_MOMMY_UPDATE
TRY_NEXT_OBJ:
	CP #0x08
	JR C, IGNORE_OBJ
	CP #0x0C
	JR NC, NOT_PLAYER_HIT
PLAYER_HIT:
	LD MOM_SOUND(IX),#0x32
	LD A,#0x50
	CALL ADD_SCORE
	JR REMOVE_MOMMY
NOT_PLAYER_HIT:
	CP #0x10
	JR NC, IGNORE_OBJ
	SET 7,C
	JR REDO_MOMMY
IGNORE_OBJ:
	LD A,MOMMY_CYCLE_COUNT(IX)
	OR A
	JR NZ, SKIP_MOMMY_UPDATE_2
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC HL
	INC HL
	LD A,(HL)
	DEC HL
	DEC HL
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	PUSH HL
	PUSH BC
	CALL GET_OBJECT
	POP BC
	POP HL
	CP #21
	JR C, LESS_THAN_21
	CP #37
	JR C, REMOVE_MOMMY
LESS_THAN_21:
	CP #0x08
	JR C, SKIP_MOMMY_UPDATE_2
	CP #0x0C
	JR C, PLAYER_HIT
SKIP_MOMMY_UPDATE_2:
	LD A,#MOMMY
	LD D,#MAGENTA
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	CALL RANDOM
	AND #0x07
	JR NZ, NO_MOMMY_MOVE
	CALL RANDOM
	AND #0x06
	INC HL
	LD (HL),A
	JR MOMMY_CONTINUE
SKIP_MOMMY_UPDATE:
	INC HL
NO_MOMMY_MOVE:
	INC HL
MOMMY_CONTINUE:
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,NEXT_UPDATE_MOMMY
	LD A,MOMMY_CYCLE_COUNT(IX)
	OR A
	JR NZ, NO_MOMMY_CYCLE_RESET
	LD MOMMY_CYCLE_COUNT(IX),#0x09
NO_MOMMY_CYCLE_RESET:
	LD A,PROG_CYCLE_COUNT(IX)
	OR A
	JR NZ, PROG_SKIP
	LD PROG_CYCLE_COUNT(IX),#0x03
PROG_SKIP:
	DEC PROG_COLOUR(IX)
	RET NZ
	LD PROG_COLOUR(IX),#0x07
	RET
UPDATE_PROG:
	LD A,C
	AND #0x7F
	LD C,A
	PUSH BC
	PUSH HL
	CALL GET_OBJECT
	POP HL
	POP BC
	CP #0x06
	JR Z, PROG_HIT
	CP #0x07
	JR Z, PROG_HIT
	LD A,PROG_CYCLE_COUNT(IX)
	OR A
	JR NZ, NO_PROG_MOVE
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC HL
	INC HL
	LD A,(HL)
	DEC HL
	DEC HL
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	PUSH HL
	PUSH BC
	CALL GET_OBJECT
	POP BC
	POP HL
	CP #0x06
	JR Z, PROG_HIT
	CP #0x07
	JR Z, PROG_HIT
NO_PROG_MOVE:
	LD A,PROG_COLOUR(IX)
	OR #0x40
	LD D,A
	LD A,#MOMMY
	CALL DRAW_GAME_CHAR
	SET 7,C
	LD (HL),C
	INC HL
	LD (HL),B
	CALL RANDOM
	AND #0x07
	JP NZ,NO_MOMMY_MOVE
	INC HL
	LD A,(HL)
	ADD #0x02
	AND #0x07
	LD (HL),A
	JP MOMMY_CONTINUE
PROG_HIT:
	LD A,#0x30
	CALL ADD_SCORE
	LD (HL),#0xFF
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	JP SKIP_MOMMY_UPDATE
	
INIT_SPHEREOID:
	LD E,#0x05
INIT_SPHEREOID_LOOP:
	LD A,(HL)
	CP #0xFF
	JR Z, SKIP_INIT_SPHEREOID
	LD A,#0x00
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x06
	OR #0x20
	LD (HL),A
	DEC HL
	DEC HL
	LD A,#SPHEREOID
	LD D,#FLASH + BLUE		; Bug - Blue sphereoid drawn first
	PUSH DE
	CALL DRAW_GAME_CHAR
	POP DE
SKIP_INIT_SPHEREOID:
	INC HL
	INC HL
	INC HL
	DEC E
	JR NZ, INIT_SPHEREOID_LOOP
	RET

; Finds an empty slot in the character data array
; A - number of slots to search
; HL - start of data array
; On exit:
; Carry flag - set: no empty slot 
; HL - points to empty slot (if found)
FIND_EMPTY_SLOT:
	PUSH BC
	LD B,A
FIND_SLOT_LOOP:
	LD A,(HL)
	CP #0xFF
	JR NZ, NEXT_SLOT
	POP BC
	OR A
	RET
NEXT_SLOT:
	INC HL
	INC HL
	INC HL
	DJNZ FIND_SLOT_LOOP
	INC SP
	INC SP
	SCF
	RET

UPDATE_SPHEREOIDS:
	DEC SPHEREOID_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#0x05
UPDATE_SPHEREOID_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JP Z,NO_SPAWN_ENFORCER
	LD ENEMY_ALIVE(IX),#0xFF
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, SPHEREOID_NOT_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, SPHEREOID_NOT_HIT
	LD A,#0x40
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JP NO_SPAWN_ENFORCER
SPHEREOID_NOT_HIT:
	LD A,SPHEREOID_CYCLE_COUNT(IX)
	OR A
	JR NZ, SPHEREOID_MOVE_NOT_BLANK
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	PUSH BC
	CALL RANDOM
	AND #0x1F
	JR NZ, SPHEREOID_NO_MOVE_CHANGE
	CALL RANDOM
	AND #0x06
	LD D,A
	INC HL
	INC HL
	LD A,(HL)
	AND #0x38
	OR D
	LD (HL),A
	DEC HL
	DEC HL
SPHEREOID_NO_MOVE_CHANGE:
	INC HL
	INC HL
	LD A,(HL)
	AND #0x07
	DEC HL
	DEC HL
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	PUSH HL
	PUSH BC
	CALL GET_OBJECT
	POP BC
	POP HL
	CP #20
	JR Z, SPHEREOID_MOVE_OK
	POP BC
	JR SPHEREOID_MOVE_NOT_BLANK
SPHEREOID_MOVE_OK:
	INC SP
	INC SP
SPHEREOID_MOVE_NOT_BLANK:
	LD A,#SPHEREOID
	LD D,#FLASH + RED
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD A,SPHEREOID_CYCLE_COUNT(IX)
	OR A
	JR NZ, NO_SPAWN_ENFORCER
	CALL RANDOM
	AND #0x7F
	JR NZ, NO_SPAWN_ENFORCER
	PUSH HL
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD DE,#0x009B
	ADD HL,DE
	LD A,#0x14
	CALL FIND_EMPTY_SLOT
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x07
	LD (HL),A
	POP HL
	INC HL
	INC HL
	LD A,(HL)
	SUB #0x08
	LD (HL),A
	DEC HL
	DEC HL
	CP #0x08
	JR NC, NO_SPAWN_ENFORCER
	LD (HL),#0xFF
NO_SPAWN_ENFORCER:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_SPHEREOID_LOOP
	LD A,SPHEREOID_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD SPHEREOID_CYCLE_COUNT(IX),#0x06
	RET

; Writes 0xFF to block of 60 bytes
; HL - Starting address of block
WRITE_FF:
	LD B,#0x3C
WRITE_FF_LOOP:
	LD (HL),#0xFF
	INC HL
	DJNZ WRITE_FF_LOOP
	RET

UPDATE_ENFORCERS:
	DEC ENFORCER_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#20
UPDATE_ENFORCER_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JP Z,ENFORCER_NO_MOVE
	LD ENEMY_ALIVE(IX),#0xFF
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, ENFORCER_NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, ENFORCER_NO_HIT
ENFORCER_HIT:
	LD A,#0x10
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JR ENFORCER_NO_MOVE
ENFORCER_NO_HIT:
	LD A,ENFORCER_CYCLE_COUNT(IX)
	OR A
	JR NZ, ENFORCER_NO_UPDATE
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	CALL RANDOM
	AND #0x1F
	JR NZ, ENFORCER_NO_DIR_CHANGE
	CALL RANDOM
	AND #0x07
	INC HL
	INC HL
	LD (HL),A
	DEC HL
	DEC HL
ENFORCER_NO_DIR_CHANGE:
	INC HL
	INC HL
	LD A,(HL)
	PUSH BC
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	LD (HL),A
	DEC HL
	DEC HL
	PUSH HL
	PUSH BC
	CALL GET_OBJECT
	POP BC
	POP HL
	CP #0x05
	JR NZ, ENFORCER_MOVE_OK
	POP BC
	JR ENFORCER_MOVE_BLOCKED
ENFORCER_MOVE_OK:
	INC SP
	INC SP
ENFORCER_MOVE_BLOCKED:
	CP #0x06
	JR Z, ENFORCER_HIT
	CP #0x07
	JR Z, ENFORCER_HIT
ENFORCER_NO_UPDATE:
	LD A,#ENFORCER
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD A,ENFORCER_CYCLE_COUNT(IX)
	OR A
	JR NZ, ENFORCER_NO_MOVE
	CALL RANDOM
	AND #0x0F
	JR Z, ENFORCER_FIRE
ENFORCER_NO_MOVE:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_ENFORCER_LOOP
	LD A,ENFORCER_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD ENFORCER_CYCLE_COUNT(IX),#0x03
	RET
ENFORCER_FIRE:
	PUSH HL
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD DE,#0x019A
	ADD HL,DE
	LD A,#0x19
	CALL FIND_EMPTY_SLOT
	JR NC, ENFORCER_FIRE_OK
	POP HL
	JR ENFORCER_NO_MOVE
ENFORCER_FIRE_OK:
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x07
	LD (HL),A
	POP HL
	JR ENFORCER_NO_MOVE

INIT_BRAINS:
	LD E,#20
INIT_BRAIN_LOOP:
	LD A,(HL)
	CP #0xFF
	JR Z, SKIP_BRAIN_INIT
	LD A,#0x01
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x06
	LD (HL),A
	DEC HL
	DEC HL
	PUSH DE
	LD A,#BRAIN_TL
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC C
	LD A,#BRAIN_TR
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC B
	LD A,#BRAIN_BR
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	DEC C
	LD A,#BRAIN_BL
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	POP DE
SKIP_BRAIN_INIT:
	INC HL
	INC HL
	INC HL
	DEC E
	JR NZ, INIT_BRAIN_LOOP
	RET

UPDATE_BRAINS:
	DEC BRAIN_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#0x14
UPDATE_BRAINS_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JP Z,BRAIN_NEXT_CYCLE
	LD A,PLAYER_MISSILE_X(IX)
	LD ENEMY_ALIVE(IX),#0xFF
	CP C
	JR Z, BRAIN_HIT_X
	DEC A
	CP C
	JR NZ, BRAIN_NO_HIT
BRAIN_HIT_X:
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, BRAIN_HIT_Y
	DEC A
	CP B
	JR NZ, BRAIN_NO_HIT
BRAIN_HIT_Y:
	LD A,#0x15
	CALL ADD_SCORE
	CALL BLANK_2x2
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD (HL),#0xFF
	JP BRAIN_NEXT_CYCLE
BRAIN_NO_HIT:
	LD A,BRAIN_CYCLE_COUNT(IX)
	OR A
	JR NZ, BRAIN_MOVE_NO_HIT_X
	CALL BLANK_2x2
	CALL RANDOM
	AND #0x07
	JR NZ, BRAIN_NO_CHANGE_DIR
	CALL RANDOM
	AND #0x06
	INC HL
	INC HL
	LD (HL),A
	JR BRAIN_CONTINUE
BRAIN_NO_CHANGE_DIR:
	INC HL
	INC HL
	LD A,(HL)
BRAIN_CONTINUE:
	LD SCRATCH_4(IX),#0x01
	CALL CHECK_MOVE
	LD (HL),A
	DEC HL
	DEC HL
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR Z, BRAIN_MOVE_HIT_X
	DEC A
	CP C
	JR NZ, BRAIN_MOVE_NO_HIT_X
BRAIN_MOVE_HIT_X:
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, BRAIN_HIT_Y
	DEC A
	CP B
	JR Z, BRAIN_HIT_Y
BRAIN_MOVE_NO_HIT_X:
	LD A,#BRAIN_TL
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC C
	LD A,#BRAIN_TR
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC B
	LD A,#BRAIN_BR
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	DEC C
	LD A,#BRAIN_BL
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	DEC B
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD A,BRAIN_CYCLE_COUNT(IX)
	OR A
	JR NZ, BRAIN_NEXT_CYCLE
	CALL RANDOM
	JR NZ, BRAIN_NEXT_CYCLE
	PUSH HL
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD DE,#0x017C
	ADD HL,DE
	LD A,#0x0A
	CALL FIND_EMPTY_SLOT
	JR C, BRAIN_NO_FIRE_SLOT
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	LD (HL),#0x20
BRAIN_NO_FIRE_SLOT:
	POP HL
BRAIN_NEXT_CYCLE:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_BRAINS_LOOP
	LD A,BRAIN_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD BRAIN_CYCLE_COUNT(IX),#0x06
	RET

UPDATE_MOM_SOUND:
	LD A,MOM_SOUND(IX)
	OR A
	RET Z
	DEC MOM_SOUND(IX)
	OR #0x80
	LD L,A
	LD DE,#0x0005
	LD H,#0x01
	CALL BEEP
	RET

INIT_HULKS:
	LD E,#15
INIT_HULKS_LOOP:
	LD A,(HL)
	CP #0xFF
	JR Z, INIT_HULKS_SKIP
	LD A,#0x01
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	AND #0x06
	LD (HL),A
	DEC HL
	DEC HL
	PUSH DE
	LD A,#HULK_D_TL
	LD D,#0x01
	CALL DRAW_GAME_CHAR
	INC C
	LD A,#HULK_D_TR
	LD D,#BLUE
	CALL DRAW_GAME_CHAR
	INC B
	LD A,#HULK_D_BR
	LD D,#GREEN
	CALL DRAW_GAME_CHAR
	DEC C
	LD A,#HULK_D_BL
	LD D,#GREEN
	CALL DRAW_GAME_CHAR
	POP DE
INIT_HULKS_SKIP:
	INC HL
	INC HL
	INC HL
	DEC E
	JR NZ, INIT_HULKS_LOOP
	RET

UPDATE_HULKS:
	DEC HULK_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#0x0F
UPDATE_HULKS_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JP Z,SKIP_UPDATE_HULK
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR Z, HULK_HIT_X
	DEC A
	CP C
	JR NZ, HULK_NO_HIT
HULK_HIT_X:
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, HULK_HIT_Y
	DEC A
	CP B
	JR NZ, HULK_NO_HIT
HULK_HIT_Y:
	INC HL
	INC HL
	LD A,PLAYER_MISSILE_DIR(IX)
	DEC A
	SLA A
	LD (HL),A
	DEC HL
	DEC HL
	LD PLAYER_MISSILE_X(IX),#0xFF
HULK_NO_HIT:
	LD A,HULK_CYCLE_COUNT(IX)
	OR A
	JR NZ, DRAW_HULK_LOOP
	CALL BLANK_2x2
	CALL RANDOM
	AND #0x0F
	JR NZ, HULK_NO_CHANGE_DIR
	CALL RANDOM
	AND #0x06
	INC HL
	INC HL
	LD (HL),A
	JR HULK_CONTINUE
HULK_NO_CHANGE_DIR:
	INC HL
	INC HL
	LD A,(HL)
HULK_CONTINUE:
	LD SCRATCH_4(IX),#0x01
	CALL CHECK_MOVE
	LD (HL),A
DRAW_HULK:
	DEC HL
	DEC HL
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD D,#0x15
	SLA A
	ADD D
	LD D,#BLUE
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	INC C
	LD D,#BLUE
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	DEC C
	INC B
	LD D,#GREEN
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	INC C
	LD D,#GREEN
	CALL DRAW_GAME_CHAR
SKIP_UPDATE_HULK:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_HULKS_LOOP
	LD A,HULK_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD HULK_CYCLE_COUNT(IX),#0x08
	RET
DRAW_HULK_LOOP:
	INC HL
	INC HL
	LD A,(HL)
	JR DRAW_HULK

INIT_QUARKS:
	LD E,#20
INIT_QUARKS_LOOP:
	LD A,(HL)
	CP #0xFF
	JR Z, INIT_QUARKS_SKIP
	LD A,#0x01
	CALL FIND_BLANK
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	CALL RANDOM
	ADD #0x10
	SET 7,A
	LD (HL),A
	LD D,#FLASH + BG_RED + CYAN
	LD A,#QUARK
	PUSH DE
	CALL DRAW_GAME_CHAR
	POP DE
	DEC HL
	DEC HL
INIT_QUARKS_SKIP:
	INC HL
	INC HL
	INC HL
	DEC E
	JR NZ, INIT_QUARKS_LOOP
	RET

UPDATE_TANKS:
	DEC TANK_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#20
UPDATE_TANKS_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	INC HL
	LD D,(HL)
	DEC HL
	DEC HL
	LD A,C
	CP #0xFF
	JP Z,SKIP_UPDATE_TANK
	LD ENEMY_ALIVE(IX),#0xFF
	BIT 7,D
	JP NZ,UPDATE_QUARKS
QUARK_CHANGED_TO_TANK:
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR Z, TANK_HIT_X
	DEC A
	CP C
	JR NZ, TANK_NO_HIT
TANK_HIT_X:
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, TANK_HIT
	DEC A
	CP B
	JR NZ, TANK_NO_HIT
TANK_HIT:
	LD A,#0x25
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD (HL),#0xFF
	CALL BLANK_2x2
	JP SKIP_UPDATE_TANK
TANK_NO_HIT:
	LD A,TANK_CYCLE_COUNT(IX)
	OR A
	JP NZ,SKIP_TANK_MOVE
	CALL BLANK_2x2
	CALL RANDOM
	AND #0x07
	JR NZ, NO_TANK_CHANGE_DIR
	CALL RANDOM
	AND #0x06
	INC HL
	INC HL
	LD (HL),A
	JR TANK_CONTINUE
NO_TANK_CHANGE_DIR:
	INC HL
	INC HL
	LD A,(HL)
TANK_CONTINUE:
	LD SCRATCH_4(IX),#0x01
	CALL CHECK_MOVE
	LD (HL),A
DRAW_TANK:
	DEC HL
	DEC HL
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
	LD D,#0x25
	LD SCRATCH_1(IX),A
	SLA A
	ADD D
	LD D,#YELLOW
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	INC C
	LD D,#YELLOW
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	DEC C
	INC B
	LD D,#YELLOW
	PUSH AF
	CALL DRAW_GAME_CHAR
	POP AF
	INC A
	INC C
	LD D,#YELLOW
	CALL DRAW_GAME_CHAR
	LD A,TANK_CYCLE_COUNT(IX)
	OR A
	JR NZ, SKIP_UPDATE_TANK
	CALL RANDOM
	AND #0x0F
	JR NZ, SKIP_UPDATE_TANK
	PUSH HL
	LD H,GAME_STATE_H(IX)
	LD L,GAME_STATE_L(IX)
	LD DE,#0x01E5
	ADD HL,DE
	LD A,#0x14
	CALL FIND_EMPTY_SLOT
	JR C, TM_NO_SLOT
	LD (HL),C
	INC HL
	LD (HL),B
	INC HL
	LD A,SCRATCH_1(IX)
	OR #0xF8
	LD (HL),A
TM_NO_SLOT:
	POP HL
SKIP_UPDATE_TANK:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_TANKS_LOOP
	LD A,TANK_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD TANK_CYCLE_COUNT(IX),#0x04
	RET

UPDATE_QUARKS:
	LD A,TANK_CYCLE_COUNT(IX)
	OR A
	JR NZ, CHECK_QUARK_HIT
	RES 7,D
	DEC D
	JR NZ, CHECK_QUARK_HIT
	CALL RANDOM
	AND #0x06
	INC HL
	INC HL
	LD (HL),A
	DEC HL
	DEC HL
	JP QUARK_CHANGED_TO_TANK
CHECK_QUARK_HIT:
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, QUARK_NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, QUARK_NO_HIT
	LD A,#0x20
	CALL ADD_SCORE
	LD PLAYER_MISSILE_X(IX),#0xFF
	LD (HL),#0xFF
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	JR SKIP_UPDATE_TANK
QUARK_NO_HIT:
	INC HL
	INC HL
	SET 7,D
	LD (HL),D
	DEC HL
	DEC HL
	LD D,#FLASH + BG_RED + CYAN
	LD A,#QUARK
	CALL DRAW_GAME_CHAR
	JR SKIP_UPDATE_TANK
SKIP_TANK_MOVE:
	INC HL
	INC HL
	LD A,(HL)
	JP DRAW_TANK

; Write 165 bytes of 0xFF starting from HL
WRITE_FF_2:
	LD B,#0xA5
WRITE_FF_2_LOOP:
	LD (HL),#0xFF
	INC HL
	DJNZ WRITE_FF_2_LOOP
	RET

UPDATE_MISSILES:
	CALL UPDATE_BRAIN_MISSILES
	CALL UPDATE_ENFORCER_MISSILES
	CALL UPDATE_TANK_MISSILES
	RET

UPDATE_BRAIN_MISSILES:
	DEC BRAIN_MISSILE_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#10
UPDATE_BRAIN_MISSILE_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JR Z, NOT_ACTIVE
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, NO_HIT
HIT_BRAIN_MISSILE:
	LD PLAYER_MISSILE_X(IX),#0xFF
BM_LOOP:
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JR NOT_ACTIVE
NO_HIT:
	LD A,BRAIN_MISSILE_CYCLE_COUNT(IX)
	OR A
	JR NZ, BM_NO_HIT_X
	INC HL
	INC HL
	DEC (HL)
	JP Z,BM_END
	DEC HL
	DEC HL
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD A,B
	SUB PLAYER_Y(IX)
	JR NC, PLAYER_ABOVE_BM
	NEG
PLAYER_ABOVE_BM:
	LD D,A
	LD A,C
	SUB PLAYER_X(IX)
	JR NC, PLAYER_LEFT_OF_BM
	NEG
PLAYER_LEFT_OF_BM:
	SUB D
	JR C, PLAYER_X_EQUALS_BM
	LD A,C
	CP PLAYER_X(IX)
	JR C, PLAYER_LEFT_OF_BM2
	DEC C
	DEC C
PLAYER_LEFT_OF_BM2:
	INC C
	JR BM_CONTINUE
PLAYER_X_EQUALS_BM:
	LD A,B
	CP PLAYER_Y(IX)
	JR C, PLAYER_BELOW_BM
	DEC B
	DEC B
PLAYER_BELOW_BM:
	INC B
BM_CONTINUE:
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, BM_NO_HIT_X
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, HIT_BRAIN_MISSILE
BM_NO_HIT_X:
	LD A,#BLANK
	LD D,#BG_WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
NOT_ACTIVE:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JR NZ, UPDATE_BRAIN_MISSILE_LOOP
	LD A,BRAIN_MISSILE_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD BRAIN_MISSILE_CYCLE_COUNT(IX),#0x03
	RET
BM_END:
	DEC HL
	DEC HL
	JR BM_LOOP

UPDATE_ENFORCER_MISSILES:
	DEC ENFORCER_MISSILE_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#25
UPDATE_ENFORCER_MISSILE_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JR Z, NOT_ACTIVE_2
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, EM_NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, EM_NO_HIT
HIT_ENFORCER_MISSILE:
	LD PLAYER_MISSILE_X(IX),#0xFF
EM_END:
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JR NOT_ACTIVE_2
EM_NO_HIT:
	LD A,ENFORCER_MISSILE_CYCLE_COUNT(IX)
	OR A
	JR NZ, EM_MOVE_NO_HIT
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	INC HL
	INC HL
	LD A,(HL)
	DEC HL
	DEC HL
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	JR C, EM_END
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, EM_MOVE_NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR Z, HIT_ENFORCER_MISSILE
EM_MOVE_NO_HIT:
	LD A,#ENFORCER_MISSILE
	LD D,#CYAN
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
NOT_ACTIVE_2:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JR NZ, UPDATE_ENFORCER_MISSILE_LOOP
	LD A,ENFORCER_MISSILE_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD ENFORCER_MISSILE_CYCLE_COUNT(IX),#0x02
	RET

UPDATE_TANK_MISSILES:
	DEC TANK_MISSILE_CYCLE_COUNT(IX)
	LD OBJECT_COUNTER(IX),#20
UPDATE_TANK_MISSILE_LOOP:
	LD C,(HL)
	INC HL
	LD B,(HL)
	DEC HL
	LD A,C
	CP #0xFF
	JR Z, TM_SKIP
	LD A,PLAYER_MISSILE_X(IX)
	CP C
	JR NZ, TM_NO_HIT
	LD A,PLAYER_MISSILE_Y(IX)
	CP B
	JR NZ, TM_NO_HIT
TM_HIT:
	LD PLAYER_MISSILE_X(IX),#0xFF
TM_END:
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD (HL),#0xFF
	JR TM_SKIP
TM_NO_HIT:
	LD A,TANK_MISSILE_CYCLE_COUNT(IX)
	OR A
	JR NZ, TM_CONTINUE
	INC HL
	INC HL
	LD A,(HL)
	SUB #0x08
	LD (HL),A
	DEC HL
	DEC HL
	LD SCRATCH_1(IX),A
	AND #0xF8
	JR Z, TM_END
	LD A,#BLANK
	LD D,#WHITE
	CALL DRAW_GAME_CHAR
	LD A,SCRATCH_1(IX)
TM_BOUNCE:
	AND #0x07
	LD SCRATCH_4(IX),#0x00
	CALL CHECK_MOVE
	JR NC, TM_MOVE_OK
	INC HL
	INC HL
	LD A,(HL)
	PUSH AF
	ADD #0x02
	AND #0x06
	SET 0,A
	POP DE
	LD E,A
	LD A,D
	AND #0xF8
	OR E
	LD (HL),A
	DEC HL
	DEC HL
	JR TM_BOUNCE
TM_MOVE_OK:
	LD A,C
	CP PLAYER_MISSILE_X(IX)
	JR NZ, TM_CONTINUE
	LD A,B
	CP PLAYER_MISSILE_Y(IX)
	JR Z, TM_HIT
TM_CONTINUE:
	LD A,#TANK_MISSILE
	LD D,#YELLOW
	CALL DRAW_GAME_CHAR
	LD (HL),C
	INC HL
	LD (HL),B
	DEC HL
TM_SKIP:
	INC HL
	INC HL
	INC HL
	DEC OBJECT_COUNTER(IX)
	JP NZ,UPDATE_TANK_MISSILE_LOOP
	LD A,TANK_MISSILE_CYCLE_COUNT(IX)
	OR A
	RET NZ
	LD TANK_MISSILE_CYCLE_COUNT(IX),#0x01
	RET

DELAY:
	LD B,#0x96
DELAY_LOOP:
	DJNZ DELAY_LOOP
	CP #0xFF
	RET

INIT:
	JP INIT_1					; Pointless double jump

GAME_OVER:
	JP GAME_OVER_1				; Pointless double jump

INIT_1:
	LD HL,#GAME_PARAMS
	LD DE,#(GAME_PARAMS + 1)
	LD BC,#PARAM_SIZE
	LD IX,#GAME_PARAMS
	LD PLAYER_X(IX),#0x00
	LDIR						; Blank game param region (IX)
	LD A,#0x00
	LD LIVES(IX),#0x02			; Initially 2 lives remaining
	LD GAME_STATE_L(IX),#0x00
	LD GAME_STATE_H(IX),#0x78
	LD EXTRA_LIFE_SCORE_1(IX),#0x10
	LD WAVE_DATA_L(IX),#0xBC
	LD WAVE_DATA_H(IX),#0x7D
	CALL ADD_SCORE
	LD A,#0x0F
	LD (#BORDCR),A
	LD A,#PLAYER_D
	LD D,#BG_BLUE + WHITE
	LD BC,#0x1601
	CALL DRAW_GAME_CHAR
	LD A,#PLAYER_D
	LD D,#BG_BLUE + WHITE
	LD BC,#0x1600
	CALL DRAW_GAME_CHAR
	LD A,#0x00
	CALL WAVE_INIT
	RET

GAME_OVER_1:
	LD SCRATCH_5(IX),#0x07
	CALL DRAW_WAVE_ANIMATION
	EI
	RET

	.area _DATA (ABS)
	.ORG 0x7800
; Game state memory region
; This is it's initial state as loaded from the tape - but it is reset by
; the wave init code. 
; This must just be left over from a previous game at the point the snapshot
; was taken of the code and data to create the tape.

	; Grunt game state - 40 records each of 2 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	.byte 0x0D, 0x0B, 0x15, 0x06, 0x12, 0x0A, 0xFF, 0x11, 0x13, 0x0B
	.byte 0x15, 0x05, 0x10, 0x0B, 0x14, 0x0B, 0x15, 0x0B, 0x0F, 0x0B
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
	
	; Mommy game state -, 20 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0x0E, 0x0E, 0x06, 0x03, 0x13, 0x06, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00

	; Sphereoid game state - 5 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00

	; Enforcer game state -, 20 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

	; Brain game state -, 20 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00 
	
	; Hulk game state -, 15 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00

	; Quark/Tank game state -, 20 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - 
	;       bits 0-6 Current movement direction value (not used when a Quark)
	;		bit 7 - 0 = Tank, 1 = Quark
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
	
	; Brain missile game state -, 10 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   T - Life timer
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

	; Enforcer missile game state -, 25 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Current movement direction value
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

	; Tank missile game state -, 20 records of 3 bytes.
	; Record format:
	;   X - X axis position of character, or 0xFF if not in use
	;   Y - Y axis position
	;   D - Bits 0-2 = Current movement direction value
	;       Bits 3-7 = Life timer
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

	; Not used
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

; Game character set data
	.ORG 0x7dbc
; Wave data - 6 bytes per wave, up to 25 waves
; Wave 0 is a blank wave and not used.
; Each byte in a wave indicates number of:
;   Grunts, Mommys, Sphereoids, Brains, Hulks, Quarks
;
WAVE_DATA:
	.byte 00, 00, 00, 00, 00, 00 	; Wave 0 - not used
	.byte 10, 02, 00, 00, 00, 00	; Wave 1
	.byte 14, 04, 01, 00, 04, 00	; Wave 2
	.byte 15, 05, 02, 00, 06, 00	; Wave 3
	.byte 17, 06, 02, 00, 08, 00	; Wave 4
	.byte 15, 10, 01, 04, 04, 00	; Wave 5
	.byte 15, 05, 03, 00, 09, 00	; Wave 6
	.byte 10, 05, 00, 00, 05, 08	; Wave 7
	.byte 17, 06, 03, 00, 09, 00	; Wave 8
	.byte 30, 05, 02, 00, 05, 00	; Wave 9
	.byte 20, 14, 02, 08, 06, 00	; Wave 10
	.byte 20, 10, 04, 00, 10, 02	; Wave 11
	.byte 20, 20, 03, 00, 15, 04	; Wave 12
	.byte 15, 06, 04, 00, 12, 10	; Wave 13
	.byte 35, 09, 02, 00, 10, 05	; Wave 14
	.byte 25, 16, 03, 13, 08, 05	; Wave 15
	.byte 20, 07, 05, 00, 05, 01	; Wave 16
	.byte 20, 07, 05, 00, 05, 02	; Wave 17
	.byte 20, 08, 03, 00, 10, 20	; Wave 18
	.byte 40, 10, 02, 00, 10, 00	; Wave 19
	.byte 30, 18, 04, 16, 05, 10	; Wave 20
	.byte 10, 05, 05, 00, 15, 03	; Wave 21
	.byte 15, 08, 04, 00, 15, 04	; Wave 22
	.byte 20, 10, 05, 00, 15, 10	; Wave 23
	.byte 25, 10, 04, 00, 15, 20	; Wave 24
	.byte 40, 20, 05, 20, 10, 15	; Wave 25

	.ORG 0x7e58
GAME_CHARS:
	; 0 Grunt
	.byte $%00111100
	.byte $%01100110
	.byte $%00111100
	.byte $%11111111
	.byte $%00111100
	.byte $%01111110
	.byte $%01000010
	.byte $%11100111

	; 1 'Sis'/ Mommy
	.byte $%00011000
	.byte $%00111100
	.byte $%10011001
	.byte $%01111110
	.byte $%00011000
	.byte $%00111100
	.byte $%01111110
	.byte $%00011000

	; 2 Sphereoid
	.byte $%00000000
	.byte $%00111100
	.byte $%01111110
	.byte $%11100111
	.byte $%11100111
	.byte $%01111110
	.byte $%00111100
	.byte $%00000000

	; 3 Enforcer
	.byte $%00011000
	.byte $%00100100
	.byte $%01000010
	.byte $%11111111
	.byte $%00011000
	.byte $%01111110
	.byte $%00011000
	.byte $%01111110

	; 4 Tank missile
	.byte $%00000000
	.byte $%00000000
	.byte $%00111100
	.byte $%01111110
	.byte $%01111110
	.byte $%00111100
	.byte $%00000000
	.byte $%00000000

	; 5 Electrode
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00011000
	.byte $%00011000
	.byte $%00111100
	.byte $%01111110
	.byte $%11111111

	; 6 Player shot up/down
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000
	.byte $%00011000

	; 7 Player shot left/right
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%11111111
	.byte $%11111111
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000

	; 8 Player facing up
	.byte $%01111110
	.byte $%11111111
	.byte $%01111110
	.byte $%00011000
	.byte $%10111101
	.byte $%11111111
	.byte $%00100100
	.byte $%00100100

	; 9 Player facing right
	.byte $%00111100
	.byte $%00110110
	.byte $%00111100
	.byte $%00011000
	.byte $%00011110
	.byte $%00011000
	.byte $%00011000
	.byte $%00011100

	; 10 Player facing down
	.byte $%01111110
	.byte $%11011011
	.byte $%01111110
	.byte $%00011000
	.byte $%11111111
	.byte $%10111101
	.byte $%00100100
	.byte $%01100110

	; 11 Player facing left
	.byte $%00111100
	.byte $%01101100
	.byte $%00111100
	.byte $%00011000
	.byte $%01111000
	.byte $%00011000
	.byte $%00011000
	.byte $%00111000

	; 12 Brain left head
	.byte $%00000011
	.byte $%00001111
	.byte $%00110001
	.byte $%01101111
	.byte $%01111111
	.byte $%00111000
	.byte $%00111111
	.byte $%00001111

	; 13 Brain right head
	.byte $%11000000
	.byte $%01110000
	.byte $%10011100
	.byte $%11110110
	.byte $%11101110
	.byte $%11011100
	.byte $%11011100
	.byte $%11110000

	; 14 Brain body left
	.byte $%00001101
	.byte $%00001111
	.byte $%00000010
	.byte $%00000001
	.byte $%00011111
	.byte $%00010011
	.byte $%00010010
	.byte $%00000110

	; 15 Brain body right
	.byte $%10110000
	.byte $%11110000
	.byte $%01000000
	.byte $%10000000
	.byte $%11111000
	.byte $%11001000
	.byte $%01001000
	.byte $%01100000

	; 16 Enforcer missile
	.byte $%00000000
	.byte $%00001000
	.byte $%00001000
	.byte $%00111110
	.byte $%00001000
	.byte $%00001000
	.byte $%00000000
	.byte $%00000000

	; 17 Quark
	.byte $%01111110
	.byte $%10000001
	.byte $%10111101
	.byte $%10100101
	.byte $%10110101
	.byte $%10000101
	.byte $%01111001
	.byte $%00000010

	; 18 ??? Not used ???
	.byte $%11111111
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000

	; 19 ??? Not used ???
	.byte $%11111111
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000

	; 20 Blank/Space
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000
	.byte $%00000000

	; 21 Hulk up, left head
	.byte $%00000000
	.byte $%00000000
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00000011

	; 22 Hulk up, right head
	.byte $%00000000
	.byte $%00000000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11000000

	; 23 Hulk up, left body
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%00011000
	.byte $%00011000
	.byte $%00111100

	; 24 Hulk up, right body
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%11111111
	.byte $%00011000
	.byte $%00011000
	.byte $%00111100

	; 25 Hulk right, left head
	.byte $%00000000
	.byte $%00000000
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00000011

	; 26 Hulk right, right head
	.byte $%00000000
	.byte $%00000000
	.byte $%11110000
	.byte $%10010000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11000000

	; 27 Hulk right, left body 
	.byte $%00111111
	.byte $%00111011
	.byte $%00111011
	.byte $%00111000
	.byte $%00111111
	.byte $%00000001
	.byte $%00000001
	.byte $%00000011

	; 28 Hulk right, right body
	.byte $%11111100
	.byte $%11111100
	.byte $%11111100
	.byte $%11111100
	.byte $%11111100
	.byte $%10000000
	.byte $%10000000
	.byte $%11000000

	; 29 Hulk down, left head
	.byte $%00000000
	.byte $%00000000
	.byte $%00001111
	.byte $%00001001
	.byte $%00001111
	.byte $%00001100
	.byte $%00001111
	.byte $%00000011

	; 30 Hulk down, right head
	.byte $%00000000
	.byte $%00000000
	.byte $%11110000
	.byte $%10010000
	.byte $%11110000
	.byte $%00110000
	.byte $%11110000
	.byte $%11000000

	; 31 Hulk down, left body
	.byte $%11111111
	.byte $%10111111
	.byte $%10111111
	.byte $%10011111
	.byte $%11111111
	.byte $%00011000
	.byte $%00011000
	.byte $%00111100

	; 32 Hulk down, right body
	.byte $%11111111
	.byte $%11111101
	.byte $%11111101
	.byte $%11111001
	.byte $%11111111
	.byte $%00011000
	.byte $%00011000
	.byte $%00111100

	; 33 Hulk left, left head
	.byte $%00000000
	.byte $%00000000
	.byte $%00001111
	.byte $%00001001
	.byte $%00001111
	.byte $%00001111
	.byte $%00001111
	.byte $%00000011

	; 34 Hulk left, right head
	.byte $%00000000
	.byte $%00000000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11110000
	.byte $%11000000

	; 35 Hulk left, left body
	.byte $%00111111
	.byte $%00111111
	.byte $%00111111
	.byte $%00111111
	.byte $%00111111
	.byte $%00000001
	.byte $%00000001
	.byte $%00000011

	; 36 Hulk left, right body
	.byte $%11111100
	.byte $%11110100
	.byte $%11110100
	.byte $%11000100
	.byte $%11111100
	.byte $%10000000
	.byte $%10000000
	.byte $%11000000

	; 37 Tank up, top left
	.byte $%00000001
	.byte $%01111001
	.byte $%01001001
	.byte $%01111001
	.byte $%01001001
	.byte $%01111001
	.byte $%01001111
	.byte $%01111111

	; 38 Tank up, top right
	.byte $%10000000
	.byte $%10011110
	.byte $%10011110
	.byte $%10010010
	.byte $%10011110
	.byte $%10010010
	.byte $%11111110
	.byte $%11110010

	; 39 Tank up, bottom left
	.byte $%01001111
	.byte $%01111111
	.byte $%01001000
	.byte $%01111000
	.byte $%01001000
	.byte $%01111000
	.byte $%01111000
	.byte $%00000000

	; 40 Tank up, bottom right
	.byte $%11111110
	.byte $%11110010
	.byte $%00011110
	.byte $%00010010
	.byte $%00011110
	.byte $%00010010
	.byte $%00011110
	.byte $%00000000

	; 41 Tank right, top left
	.byte $%00000000
	.byte $%01111111
	.byte $%01010101
	.byte $%01010101
	.byte $%01111111
	.byte $%00000011
	.byte $%00000011
	.byte $%00000011

	; 42 Tank right, top right
	.byte $%00000000
	.byte $%11111110
	.byte $%01010110
	.byte $%01010110
	.byte $%11111110
	.byte $%11000000
	.byte $%11000000
	.byte $%11111111

	; 43 Tank right, bottom left
	.byte $%00000011
	.byte $%00000011
	.byte $%00000011
	.byte $%01111111
	.byte $%01101010
	.byte $%01101010
	.byte $%01111111
	.byte $%00000000

	; 44 Tank right, bottom right
	.byte $%11111111
	.byte $%11000000
	.byte $%11000000
	.byte $%11111110
	.byte $%10101010
	.byte $%10101010
	.byte $%11111110
	.byte $%00000000

	; 45 Tank down, top left
	.byte $%00000000
	.byte $%01111000
	.byte $%01001000
	.byte $%01111000
	.byte $%01001000
	.byte $%01111000
	.byte $%01001111
	.byte $%01111111

	; 46 Tank down, top right
	.byte $%00000000
	.byte $%00011110
	.byte $%00011110
	.byte $%00010010
	.byte $%00011110
	.byte $%00010010
	.byte $%11111110
	.byte $%11110010

	; 47 Tank down, bottom left
	.byte $%01001111
	.byte $%01111111
	.byte $%01001001
	.byte $%01111001
	.byte $%01001001
	.byte $%01111001
	.byte $%01111001
	.byte $%00000001

	; 48 Tank down, bottom right
	.byte $%11111110
	.byte $%11110010
	.byte $%10011110
	.byte $%10010010
	.byte $%10011110
	.byte $%10010010
	.byte $%10011110
	.byte $%10000000

	; 49 Tank left, top left
	.byte $%00000000
	.byte $%01111111
	.byte $%01010101
	.byte $%01010101
	.byte $%01111111
	.byte $%00000011
	.byte $%00000011
	.byte $%11111111

	; 50 Tank left, top right
	.byte $%00000000
	.byte $%11111110
	.byte $%01010110
	.byte $%01010110
	.byte $%11111110
	.byte $%11000000
	.byte $%11000000
	.byte $%11000000

	; 51 Tank left, bottom left
	.byte $%11111111
	.byte $%00000011
	.byte $%00000011
	.byte $%01111111
	.byte $%01101010
	.byte $%01101010
	.byte $%01111111
	.byte $%00000000

	; 52 Tank left, bottom right
	.byte $%11000000
	.byte $%11000000
	.byte $%11000000
	.byte $%11111110
	.byte $%10101010
	.byte $%10101010
	.byte $%11111110
	.byte $%00000000
